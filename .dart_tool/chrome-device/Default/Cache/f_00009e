define(['dart_sdk', 'packages/image_cropper/src/utils.dart'], (function load__packages__image_cropper__src__options_dart(dart_sdk, packages__image_cropper__src__utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const utils = packages__image_cropper__src__utils$46dart.src__utils;
  var options = Object.create(dart.library);
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.original",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.square",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.ratio3x2",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.ratio5x3",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.ratio4x3",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.ratio5x4",
        index: 5
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.ratio7x5",
        index: 6
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: options.CropAspectRatioPreset.prototype,
        [_name$]: "CropAspectRatioPreset.ratio16x9",
        index: 7
      });
    },
    get C8() {
      return C[8] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7], options.CropAspectRatioPreset);
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: options.CropStyle.prototype,
        [_name$]: "CropStyle.rectangle",
        index: 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: options.CropStyle.prototype,
        [_name$]: "CropStyle.circle",
        index: 1
      });
    },
    get C11() {
      return C[11] = dart.constList([C[9] || CT.C9, C[10] || CT.C10], options.CropStyle);
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: options.ImageCompressFormat.prototype,
        [_name$]: "ImageCompressFormat.jpg",
        index: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: options.ImageCompressFormat.prototype,
        [_name$]: "ImageCompressFormat.png",
        index: 1
      });
    },
    get C14() {
      return C[14] = dart.constList([C[12] || CT.C12, C[13] || CT.C13], options.ImageCompressFormat);
    }
  }, false);
  var C = Array(15).fill(void 0);
  var I = [
    "package:image_cropper/src/options.dart",
    "file:///C:/Users/Tomal/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/image_cropper-1.4.1/lib/src/options.dart"
  ];
  var _name$ = dart.privateName(options, "_name");
  options.CropAspectRatioPreset = class CropAspectRatioPreset extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (options.CropAspectRatioPreset.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = options.CropAspectRatioPreset.prototype;
  dart.addTypeTests(options.CropAspectRatioPreset);
  dart.addTypeCaches(options.CropAspectRatioPreset);
  dart.setLibraryUri(options.CropAspectRatioPreset, I[0]);
  dart.setFieldSignature(options.CropAspectRatioPreset, () => ({
    __proto__: dart.getFields(options.CropAspectRatioPreset.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(options.CropAspectRatioPreset, ['toString']);
  options.CropAspectRatioPreset.original = C[0] || CT.C0;
  options.CropAspectRatioPreset.square = C[1] || CT.C1;
  options.CropAspectRatioPreset.ratio3x2 = C[2] || CT.C2;
  options.CropAspectRatioPreset.ratio5x3 = C[3] || CT.C3;
  options.CropAspectRatioPreset.ratio4x3 = C[4] || CT.C4;
  options.CropAspectRatioPreset.ratio5x4 = C[5] || CT.C5;
  options.CropAspectRatioPreset.ratio7x5 = C[6] || CT.C6;
  options.CropAspectRatioPreset.ratio16x9 = C[7] || CT.C7;
  options.CropAspectRatioPreset.values = C[8] || CT.C8;
  options.CropStyle = class CropStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (options.CropStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = options.CropStyle.prototype;
  dart.addTypeTests(options.CropStyle);
  dart.addTypeCaches(options.CropStyle);
  dart.setLibraryUri(options.CropStyle, I[0]);
  dart.setFieldSignature(options.CropStyle, () => ({
    __proto__: dart.getFields(options.CropStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(options.CropStyle, ['toString']);
  options.CropStyle.rectangle = C[9] || CT.C9;
  options.CropStyle.circle = C[10] || CT.C10;
  options.CropStyle.values = C[11] || CT.C11;
  options.ImageCompressFormat = class ImageCompressFormat extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (options.ImageCompressFormat.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = options.ImageCompressFormat.prototype;
  dart.addTypeTests(options.ImageCompressFormat);
  dart.addTypeCaches(options.ImageCompressFormat);
  dart.setLibraryUri(options.ImageCompressFormat, I[0]);
  dart.setFieldSignature(options.ImageCompressFormat, () => ({
    __proto__: dart.getFields(options.ImageCompressFormat.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(options.ImageCompressFormat, ['toString']);
  options.ImageCompressFormat.jpg = C[12] || CT.C12;
  options.ImageCompressFormat.png = C[13] || CT.C13;
  options.ImageCompressFormat.values = C[14] || CT.C14;
  var ratioX$ = dart.privateName(options, "CropAspectRatio.ratioX");
  var ratioY$ = dart.privateName(options, "CropAspectRatio.ratioY");
  options.CropAspectRatio = class CropAspectRatio extends core.Object {
    get ratioX() {
      return this[ratioX$];
    }
    set ratioX(value) {
      super.ratioX = value;
    }
    get ratioY() {
      return this[ratioY$];
    }
    set ratioY(value) {
      super.ratioY = value;
    }
    get hashCode() {
      return (this.ratioX[$hashCode] ^ this.ratioY[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || options.CropAspectRatio.is(other) && this.ratioX === other.ratioX && this.ratioY === other.ratioY;
    }
  };
  (options.CropAspectRatio.new = function(opts) {
    let ratioX = opts && 'ratioX' in opts ? opts.ratioX : null;
    let ratioY = opts && 'ratioY' in opts ? opts.ratioY : null;
    this[ratioX$] = ratioX;
    this[ratioY$] = ratioY;
    if (!(ratioX > 0.0 && ratioY > 0.0)) dart.assertFailed(null, I[1], 39, 16, "ratioX > 0.0 && ratioY > 0.0");
    ;
  }).prototype = options.CropAspectRatio.prototype;
  dart.addTypeTests(options.CropAspectRatio);
  dart.addTypeCaches(options.CropAspectRatio);
  dart.setLibraryUri(options.CropAspectRatio, I[0]);
  dart.setFieldSignature(options.CropAspectRatio, () => ({
    __proto__: dart.getFields(options.CropAspectRatio.__proto__),
    ratioX: dart.finalFieldType(core.double),
    ratioY: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(options.CropAspectRatio, ['_equals']);
  dart.defineExtensionAccessors(options.CropAspectRatio, ['hashCode']);
  var toolbarTitle$ = dart.privateName(options, "AndroidUiSettings.toolbarTitle");
  var toolbarColor$ = dart.privateName(options, "AndroidUiSettings.toolbarColor");
  var statusBarColor$ = dart.privateName(options, "AndroidUiSettings.statusBarColor");
  var toolbarWidgetColor$ = dart.privateName(options, "AndroidUiSettings.toolbarWidgetColor");
  var backgroundColor$ = dart.privateName(options, "AndroidUiSettings.backgroundColor");
  var activeControlsWidgetColor$ = dart.privateName(options, "AndroidUiSettings.activeControlsWidgetColor");
  var dimmedLayerColor$ = dart.privateName(options, "AndroidUiSettings.dimmedLayerColor");
  var cropFrameColor$ = dart.privateName(options, "AndroidUiSettings.cropFrameColor");
  var cropGridColor$ = dart.privateName(options, "AndroidUiSettings.cropGridColor");
  var cropFrameStrokeWidth$ = dart.privateName(options, "AndroidUiSettings.cropFrameStrokeWidth");
  var cropGridRowCount$ = dart.privateName(options, "AndroidUiSettings.cropGridRowCount");
  var cropGridColumnCount$ = dart.privateName(options, "AndroidUiSettings.cropGridColumnCount");
  var cropGridStrokeWidth$ = dart.privateName(options, "AndroidUiSettings.cropGridStrokeWidth");
  var showCropGrid$ = dart.privateName(options, "AndroidUiSettings.showCropGrid");
  var lockAspectRatio$ = dart.privateName(options, "AndroidUiSettings.lockAspectRatio");
  var hideBottomControls$ = dart.privateName(options, "AndroidUiSettings.hideBottomControls");
  var initAspectRatio$ = dart.privateName(options, "AndroidUiSettings.initAspectRatio");
  options.AndroidUiSettings = class AndroidUiSettings extends core.Object {
    get toolbarTitle() {
      return this[toolbarTitle$];
    }
    set toolbarTitle(value) {
      super.toolbarTitle = value;
    }
    get toolbarColor() {
      return this[toolbarColor$];
    }
    set toolbarColor(value) {
      super.toolbarColor = value;
    }
    get statusBarColor() {
      return this[statusBarColor$];
    }
    set statusBarColor(value) {
      super.statusBarColor = value;
    }
    get toolbarWidgetColor() {
      return this[toolbarWidgetColor$];
    }
    set toolbarWidgetColor(value) {
      super.toolbarWidgetColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get activeControlsWidgetColor() {
      return this[activeControlsWidgetColor$];
    }
    set activeControlsWidgetColor(value) {
      super.activeControlsWidgetColor = value;
    }
    get dimmedLayerColor() {
      return this[dimmedLayerColor$];
    }
    set dimmedLayerColor(value) {
      super.dimmedLayerColor = value;
    }
    get cropFrameColor() {
      return this[cropFrameColor$];
    }
    set cropFrameColor(value) {
      super.cropFrameColor = value;
    }
    get cropGridColor() {
      return this[cropGridColor$];
    }
    set cropGridColor(value) {
      super.cropGridColor = value;
    }
    get cropFrameStrokeWidth() {
      return this[cropFrameStrokeWidth$];
    }
    set cropFrameStrokeWidth(value) {
      super.cropFrameStrokeWidth = value;
    }
    get cropGridRowCount() {
      return this[cropGridRowCount$];
    }
    set cropGridRowCount(value) {
      super.cropGridRowCount = value;
    }
    get cropGridColumnCount() {
      return this[cropGridColumnCount$];
    }
    set cropGridColumnCount(value) {
      super.cropGridColumnCount = value;
    }
    get cropGridStrokeWidth() {
      return this[cropGridStrokeWidth$];
    }
    set cropGridStrokeWidth(value) {
      super.cropGridStrokeWidth = value;
    }
    get showCropGrid() {
      return this[showCropGrid$];
    }
    set showCropGrid(value) {
      super.showCropGrid = value;
    }
    get lockAspectRatio() {
      return this[lockAspectRatio$];
    }
    set lockAspectRatio(value) {
      super.lockAspectRatio = value;
    }
    get hideBottomControls() {
      return this[hideBottomControls$];
    }
    set hideBottomControls(value) {
      super.hideBottomControls = value;
    }
    get initAspectRatio() {
      return this[initAspectRatio$];
    }
    set initAspectRatio(value) {
      super.initAspectRatio = value;
    }
    toMap() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      return new (T.IdentityMapOfString$dynamic()).from(["android.toolbar_title", this.toolbarTitle, "android.toolbar_color", utils.int32((t0 = this.toolbarColor, t0 == null ? null : t0.value)), "android.statusbar_color", utils.int32((t0$ = this.statusBarColor, t0$ == null ? null : t0$.value)), "android.toolbar_widget_color", utils.int32((t0$0 = this.toolbarWidgetColor, t0$0 == null ? null : t0$0.value)), "android.background_color", utils.int32((t0$1 = this.backgroundColor, t0$1 == null ? null : t0$1.value)), "android.active_controls_widget_color", utils.int32((t0$2 = this.activeControlsWidgetColor, t0$2 == null ? null : t0$2.value)), "android.dimmed_layer_color", utils.int32((t0$3 = this.dimmedLayerColor, t0$3 == null ? null : t0$3.value)), "android.crop_frame_color", utils.int32((t0$4 = this.cropFrameColor, t0$4 == null ? null : t0$4.value)), "android.crop_grid_color", utils.int32((t0$5 = this.cropGridColor, t0$5 == null ? null : t0$5.value)), "android.crop_frame_stroke_width", this.cropFrameStrokeWidth, "android.crop_grid_row_count", this.cropGridRowCount, "android.crop_grid_column_count", this.cropGridColumnCount, "android.crop_grid_stroke_width", this.cropGridStrokeWidth, "android.show_crop_grid", this.showCropGrid, "android.lock_aspect_ratio", this.lockAspectRatio, "android.hide_bottom_controls", this.hideBottomControls, "android.init_aspect_ratio", options.aspectRatioPresetName(this.initAspectRatio)]);
    }
  };
  (options.AndroidUiSettings.new = function(opts) {
    let toolbarTitle = opts && 'toolbarTitle' in opts ? opts.toolbarTitle : null;
    let toolbarColor = opts && 'toolbarColor' in opts ? opts.toolbarColor : null;
    let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
    let toolbarWidgetColor = opts && 'toolbarWidgetColor' in opts ? opts.toolbarWidgetColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let activeControlsWidgetColor = opts && 'activeControlsWidgetColor' in opts ? opts.activeControlsWidgetColor : null;
    let dimmedLayerColor = opts && 'dimmedLayerColor' in opts ? opts.dimmedLayerColor : null;
    let cropFrameColor = opts && 'cropFrameColor' in opts ? opts.cropFrameColor : null;
    let cropGridColor = opts && 'cropGridColor' in opts ? opts.cropGridColor : null;
    let cropFrameStrokeWidth = opts && 'cropFrameStrokeWidth' in opts ? opts.cropFrameStrokeWidth : null;
    let cropGridRowCount = opts && 'cropGridRowCount' in opts ? opts.cropGridRowCount : null;
    let cropGridColumnCount = opts && 'cropGridColumnCount' in opts ? opts.cropGridColumnCount : null;
    let cropGridStrokeWidth = opts && 'cropGridStrokeWidth' in opts ? opts.cropGridStrokeWidth : null;
    let showCropGrid = opts && 'showCropGrid' in opts ? opts.showCropGrid : null;
    let lockAspectRatio = opts && 'lockAspectRatio' in opts ? opts.lockAspectRatio : null;
    let hideBottomControls = opts && 'hideBottomControls' in opts ? opts.hideBottomControls : null;
    let initAspectRatio = opts && 'initAspectRatio' in opts ? opts.initAspectRatio : null;
    this[toolbarTitle$] = toolbarTitle;
    this[toolbarColor$] = toolbarColor;
    this[statusBarColor$] = statusBarColor;
    this[toolbarWidgetColor$] = toolbarWidgetColor;
    this[backgroundColor$] = backgroundColor;
    this[activeControlsWidgetColor$] = activeControlsWidgetColor;
    this[dimmedLayerColor$] = dimmedLayerColor;
    this[cropFrameColor$] = cropFrameColor;
    this[cropGridColor$] = cropGridColor;
    this[cropFrameStrokeWidth$] = cropFrameStrokeWidth;
    this[cropGridRowCount$] = cropGridRowCount;
    this[cropGridColumnCount$] = cropGridColumnCount;
    this[cropGridStrokeWidth$] = cropGridStrokeWidth;
    this[showCropGrid$] = showCropGrid;
    this[lockAspectRatio$] = lockAspectRatio;
    this[hideBottomControls$] = hideBottomControls;
    this[initAspectRatio$] = initAspectRatio;
    ;
  }).prototype = options.AndroidUiSettings.prototype;
  dart.addTypeTests(options.AndroidUiSettings);
  dart.addTypeCaches(options.AndroidUiSettings);
  dart.setMethodSignature(options.AndroidUiSettings, () => ({
    __proto__: dart.getMethods(options.AndroidUiSettings.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(options.AndroidUiSettings, I[0]);
  dart.setFieldSignature(options.AndroidUiSettings, () => ({
    __proto__: dart.getFields(options.AndroidUiSettings.__proto__),
    toolbarTitle: dart.finalFieldType(dart.nullable(core.String)),
    toolbarColor: dart.finalFieldType(dart.nullable(ui.Color)),
    statusBarColor: dart.finalFieldType(dart.nullable(ui.Color)),
    toolbarWidgetColor: dart.finalFieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    activeControlsWidgetColor: dart.finalFieldType(dart.nullable(ui.Color)),
    dimmedLayerColor: dart.finalFieldType(dart.nullable(ui.Color)),
    cropFrameColor: dart.finalFieldType(dart.nullable(ui.Color)),
    cropGridColor: dart.finalFieldType(dart.nullable(ui.Color)),
    cropFrameStrokeWidth: dart.finalFieldType(dart.nullable(core.int)),
    cropGridRowCount: dart.finalFieldType(dart.nullable(core.int)),
    cropGridColumnCount: dart.finalFieldType(dart.nullable(core.int)),
    cropGridStrokeWidth: dart.finalFieldType(dart.nullable(core.int)),
    showCropGrid: dart.finalFieldType(dart.nullable(core.bool)),
    lockAspectRatio: dart.finalFieldType(dart.nullable(core.bool)),
    hideBottomControls: dart.finalFieldType(dart.nullable(core.bool)),
    initAspectRatio: dart.finalFieldType(dart.nullable(options.CropAspectRatioPreset))
  }));
  var minimumAspectRatio$ = dart.privateName(options, "IOSUiSettings.minimumAspectRatio");
  var rectX$ = dart.privateName(options, "IOSUiSettings.rectX");
  var rectY$ = dart.privateName(options, "IOSUiSettings.rectY");
  var rectWidth$ = dart.privateName(options, "IOSUiSettings.rectWidth");
  var rectHeight$ = dart.privateName(options, "IOSUiSettings.rectHeight");
  var showActivitySheetOnDone$ = dart.privateName(options, "IOSUiSettings.showActivitySheetOnDone");
  var showCancelConfirmationDialog$ = dart.privateName(options, "IOSUiSettings.showCancelConfirmationDialog");
  var rotateClockwiseButtonHidden$ = dart.privateName(options, "IOSUiSettings.rotateClockwiseButtonHidden");
  var hidesNavigationBar$ = dart.privateName(options, "IOSUiSettings.hidesNavigationBar");
  var rotateButtonsHidden$ = dart.privateName(options, "IOSUiSettings.rotateButtonsHidden");
  var resetButtonHidden$ = dart.privateName(options, "IOSUiSettings.resetButtonHidden");
  var aspectRatioPickerButtonHidden$ = dart.privateName(options, "IOSUiSettings.aspectRatioPickerButtonHidden");
  var resetAspectRatioEnabled$ = dart.privateName(options, "IOSUiSettings.resetAspectRatioEnabled");
  var aspectRatioLockDimensionSwapEnabled$ = dart.privateName(options, "IOSUiSettings.aspectRatioLockDimensionSwapEnabled");
  var aspectRatioLockEnabled$ = dart.privateName(options, "IOSUiSettings.aspectRatioLockEnabled");
  var title$ = dart.privateName(options, "IOSUiSettings.title");
  var doneButtonTitle$ = dart.privateName(options, "IOSUiSettings.doneButtonTitle");
  var cancelButtonTitle$ = dart.privateName(options, "IOSUiSettings.cancelButtonTitle");
  options.IOSUiSettings = class IOSUiSettings extends core.Object {
    get minimumAspectRatio() {
      return this[minimumAspectRatio$];
    }
    set minimumAspectRatio(value) {
      super.minimumAspectRatio = value;
    }
    get rectX() {
      return this[rectX$];
    }
    set rectX(value) {
      super.rectX = value;
    }
    get rectY() {
      return this[rectY$];
    }
    set rectY(value) {
      super.rectY = value;
    }
    get rectWidth() {
      return this[rectWidth$];
    }
    set rectWidth(value) {
      super.rectWidth = value;
    }
    get rectHeight() {
      return this[rectHeight$];
    }
    set rectHeight(value) {
      super.rectHeight = value;
    }
    get showActivitySheetOnDone() {
      return this[showActivitySheetOnDone$];
    }
    set showActivitySheetOnDone(value) {
      super.showActivitySheetOnDone = value;
    }
    get showCancelConfirmationDialog() {
      return this[showCancelConfirmationDialog$];
    }
    set showCancelConfirmationDialog(value) {
      super.showCancelConfirmationDialog = value;
    }
    get rotateClockwiseButtonHidden() {
      return this[rotateClockwiseButtonHidden$];
    }
    set rotateClockwiseButtonHidden(value) {
      super.rotateClockwiseButtonHidden = value;
    }
    get hidesNavigationBar() {
      return this[hidesNavigationBar$];
    }
    set hidesNavigationBar(value) {
      super.hidesNavigationBar = value;
    }
    get rotateButtonsHidden() {
      return this[rotateButtonsHidden$];
    }
    set rotateButtonsHidden(value) {
      super.rotateButtonsHidden = value;
    }
    get resetButtonHidden() {
      return this[resetButtonHidden$];
    }
    set resetButtonHidden(value) {
      super.resetButtonHidden = value;
    }
    get aspectRatioPickerButtonHidden() {
      return this[aspectRatioPickerButtonHidden$];
    }
    set aspectRatioPickerButtonHidden(value) {
      super.aspectRatioPickerButtonHidden = value;
    }
    get resetAspectRatioEnabled() {
      return this[resetAspectRatioEnabled$];
    }
    set resetAspectRatioEnabled(value) {
      super.resetAspectRatioEnabled = value;
    }
    get aspectRatioLockDimensionSwapEnabled() {
      return this[aspectRatioLockDimensionSwapEnabled$];
    }
    set aspectRatioLockDimensionSwapEnabled(value) {
      super.aspectRatioLockDimensionSwapEnabled = value;
    }
    get aspectRatioLockEnabled() {
      return this[aspectRatioLockEnabled$];
    }
    set aspectRatioLockEnabled(value) {
      super.aspectRatioLockEnabled = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get doneButtonTitle() {
      return this[doneButtonTitle$];
    }
    set doneButtonTitle(value) {
      super.doneButtonTitle = value;
    }
    get cancelButtonTitle() {
      return this[cancelButtonTitle$];
    }
    set cancelButtonTitle(value) {
      super.cancelButtonTitle = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["ios.minimum_aspect_ratio", this.minimumAspectRatio, "ios.rect_x", this.rectX, "ios.rect_y", this.rectY, "ios.rect_width", this.rectWidth, "ios.rect_height", this.rectHeight, "ios.show_activity_sheet_on_done", this.showActivitySheetOnDone, "ios.show_cancel_confirmation_dialog", this.showCancelConfirmationDialog, "ios.rotate_clockwise_button_hidden", this.rotateClockwiseButtonHidden, "ios.hides_navigation_bar", this.hidesNavigationBar, "ios.rotate_button_hidden", this.rotateButtonsHidden, "ios.reset_button_hidden", this.resetButtonHidden, "ios.aspect_ratio_picker_button_hidden", this.aspectRatioPickerButtonHidden, "ios.reset_aspect_ratio_enabled", this.resetAspectRatioEnabled, "ios.aspect_ratio_lock_dimension_swap_enabled", this.aspectRatioLockDimensionSwapEnabled, "ios.aspect_ratio_lock_enabled", this.aspectRatioLockEnabled, "ios.title", this.title, "ios.done_button_title", this.doneButtonTitle, "ios.cancel_button_title", this.cancelButtonTitle]);
    }
  };
  (options.IOSUiSettings.new = function(opts) {
    let minimumAspectRatio = opts && 'minimumAspectRatio' in opts ? opts.minimumAspectRatio : null;
    let rectX = opts && 'rectX' in opts ? opts.rectX : null;
    let rectY = opts && 'rectY' in opts ? opts.rectY : null;
    let rectWidth = opts && 'rectWidth' in opts ? opts.rectWidth : null;
    let rectHeight = opts && 'rectHeight' in opts ? opts.rectHeight : null;
    let showActivitySheetOnDone = opts && 'showActivitySheetOnDone' in opts ? opts.showActivitySheetOnDone : null;
    let showCancelConfirmationDialog = opts && 'showCancelConfirmationDialog' in opts ? opts.showCancelConfirmationDialog : false;
    let rotateClockwiseButtonHidden = opts && 'rotateClockwiseButtonHidden' in opts ? opts.rotateClockwiseButtonHidden : false;
    let hidesNavigationBar = opts && 'hidesNavigationBar' in opts ? opts.hidesNavigationBar : null;
    let rotateButtonsHidden = opts && 'rotateButtonsHidden' in opts ? opts.rotateButtonsHidden : false;
    let resetButtonHidden = opts && 'resetButtonHidden' in opts ? opts.resetButtonHidden : false;
    let aspectRatioPickerButtonHidden = opts && 'aspectRatioPickerButtonHidden' in opts ? opts.aspectRatioPickerButtonHidden : false;
    let resetAspectRatioEnabled = opts && 'resetAspectRatioEnabled' in opts ? opts.resetAspectRatioEnabled : true;
    let aspectRatioLockDimensionSwapEnabled = opts && 'aspectRatioLockDimensionSwapEnabled' in opts ? opts.aspectRatioLockDimensionSwapEnabled : false;
    let aspectRatioLockEnabled = opts && 'aspectRatioLockEnabled' in opts ? opts.aspectRatioLockEnabled : false;
    let title = opts && 'title' in opts ? opts.title : null;
    let doneButtonTitle = opts && 'doneButtonTitle' in opts ? opts.doneButtonTitle : null;
    let cancelButtonTitle = opts && 'cancelButtonTitle' in opts ? opts.cancelButtonTitle : null;
    this[minimumAspectRatio$] = minimumAspectRatio;
    this[rectX$] = rectX;
    this[rectY$] = rectY;
    this[rectWidth$] = rectWidth;
    this[rectHeight$] = rectHeight;
    this[showActivitySheetOnDone$] = showActivitySheetOnDone;
    this[showCancelConfirmationDialog$] = showCancelConfirmationDialog;
    this[rotateClockwiseButtonHidden$] = rotateClockwiseButtonHidden;
    this[hidesNavigationBar$] = hidesNavigationBar;
    this[rotateButtonsHidden$] = rotateButtonsHidden;
    this[resetButtonHidden$] = resetButtonHidden;
    this[aspectRatioPickerButtonHidden$] = aspectRatioPickerButtonHidden;
    this[resetAspectRatioEnabled$] = resetAspectRatioEnabled;
    this[aspectRatioLockDimensionSwapEnabled$] = aspectRatioLockDimensionSwapEnabled;
    this[aspectRatioLockEnabled$] = aspectRatioLockEnabled;
    this[title$] = title;
    this[doneButtonTitle$] = doneButtonTitle;
    this[cancelButtonTitle$] = cancelButtonTitle;
    ;
  }).prototype = options.IOSUiSettings.prototype;
  dart.addTypeTests(options.IOSUiSettings);
  dart.addTypeCaches(options.IOSUiSettings);
  dart.setMethodSignature(options.IOSUiSettings, () => ({
    __proto__: dart.getMethods(options.IOSUiSettings.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(options.IOSUiSettings, I[0]);
  dart.setFieldSignature(options.IOSUiSettings, () => ({
    __proto__: dart.getFields(options.IOSUiSettings.__proto__),
    minimumAspectRatio: dart.finalFieldType(dart.nullable(core.double)),
    rectX: dart.finalFieldType(dart.nullable(core.double)),
    rectY: dart.finalFieldType(dart.nullable(core.double)),
    rectWidth: dart.finalFieldType(dart.nullable(core.double)),
    rectHeight: dart.finalFieldType(dart.nullable(core.double)),
    showActivitySheetOnDone: dart.finalFieldType(dart.nullable(core.bool)),
    showCancelConfirmationDialog: dart.finalFieldType(core.bool),
    rotateClockwiseButtonHidden: dart.finalFieldType(core.bool),
    hidesNavigationBar: dart.finalFieldType(dart.nullable(core.bool)),
    rotateButtonsHidden: dart.finalFieldType(core.bool),
    resetButtonHidden: dart.finalFieldType(core.bool),
    aspectRatioPickerButtonHidden: dart.finalFieldType(core.bool),
    resetAspectRatioEnabled: dart.finalFieldType(core.bool),
    aspectRatioLockDimensionSwapEnabled: dart.finalFieldType(core.bool),
    aspectRatioLockEnabled: dart.finalFieldType(core.bool),
    title: dart.finalFieldType(dart.nullable(core.String)),
    doneButtonTitle: dart.finalFieldType(dart.nullable(core.String)),
    cancelButtonTitle: dart.finalFieldType(dart.nullable(core.String))
  }));
  options.aspectRatioPresetName = function aspectRatioPresetName(preset) {
    switch (preset) {
      case C[0] || CT.C0:
      {
        return "original";
      }
      case C[1] || CT.C1:
      {
        return "square";
      }
      case C[2] || CT.C2:
      {
        return "3x2";
      }
      case C[4] || CT.C4:
      {
        return "4x3";
      }
      case C[3] || CT.C3:
      {
        return "5x3";
      }
      case C[5] || CT.C5:
      {
        return "5x4";
      }
      case C[6] || CT.C6:
      {
        return "7x5";
      }
      case C[7] || CT.C7:
      {
        return "16x9";
      }
      default:
      {
        return "original";
      }
    }
  };
  options.cropStyleName = function cropStyleName(style) {
    switch (style) {
      case C[9] || CT.C9:
      {
        return "rectangle";
      }
      case C[10] || CT.C10:
      {
        return "circle";
      }
      default:
      {
        return "rectangle";
      }
    }
  };
  options.compressFormatName = function compressFormatName(format) {
    switch (format) {
      case C[12] || CT.C12:
      {
        return "jpg";
      }
      case C[13] || CT.C13:
      {
        return "png";
      }
      default:
      {
        return "jpg";
      }
    }
  };
  dart.trackLibraries("packages/image_cropper/src/options.dart", {
    "package:image_cropper/src/options.dart": options
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["options.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../F:/packages/image_cropper/src/options.dart.lib.js"}');
  // Exports:
  return {
    src__options: options
  };
}));

//# sourceMappingURL=options.dart.lib.js.map
